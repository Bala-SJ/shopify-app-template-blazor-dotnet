@using ShopifySharp;
@using ShopifySharp.Lists;
@using ShopifyAppTemplate.Services

@inject AppState AppStateObj
@inject ShopjetsAdminService ShopjetsAdmin

<div class="row">

    <!-- Left side filter panel -->
    <div class="col-lg-3">
        <div class="mb-2">
            <label for="select-input" class="form-label align-left">Status</label>
            <select class="form-select" id="status-input" @bind="CurrentStatus">
                <option>@ProductStatusConfigNames.GetUXName(ProductStatusConfig.All)</option>
                <option>@ProductStatusConfigNames.GetUXName(ProductStatusConfig.Active)</option>
                <option>@ProductStatusConfigNames.GetUXName(ProductStatusConfig.Draft)</option>
                <option>@ProductStatusConfigNames.GetUXName(ProductStatusConfig.Archived)</option>
            </select>
        </div>

        <div class="mb-2">
            <label for="text-input" class="form-label">Product contains title</label>
            <div class="input-group">
                <RadzenTextBox class="form-control" @bind-Value=@AppStateObj.PFConfig.Title TValue="string"
                    Change=@OnTitleChanged />
                <span class="input-group-text">
                    <i class="ai-delete" @onclick="() => GetProductsByTitle(true)"></i>
                </span>
            </div>
        </div>

        <div class="mb-2">
            <label for="text-input" class="form-label">Product tagged with</label>
            <div class="input-group">
                <RadzenTextBox class="form-control" @bind-Value=@AppStateObj.PFConfig.Tag TValue="string"
                    Change=@OnTagChanged />
                <span class="input-group-text">
                    <i class="ai-delete" @onclick="() => GetProductsByTag(true)"></i>
                </span>
            </div>
        </div>
    </div>
    <!-- Left side filter panel -->

    <!-- Right side image gallery grid with gutters -->
    <div class="col-lg-9">
        @if (gettingProducts == false && productImages != null)
        {
            <div class="row gallery">
                @foreach (var imgItem in productImages)
                {
                    if (SelectMode == true)
                    {
                        <div class="col-xl-2 col-sm-6 mb-grid-gutter">
                            <a class="gallery-item rounded-3" data-sub-html='<h6 class="fs-sm text-light">Select image</h6>'
                                @onclick="() => SelectImage(imgItem)">
                                <img class="rounded-3" src=@imgItem.Src alt="">
                                <span class="gallery-caption">Select image</span>
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="col-xl-2 col-sm-6 mb-grid-gutter">
                            <img class="rounded-3" src=@imgItem.Src alt="">
                        </div>
                    }
                }
            </div>
        }
        else
        {
            <div class="progress mb-3">
                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"
                aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        }

        <div class="d-flex justify-content-center">
            <nav aria-label="Image view page navigation">
                <ul class="pagination pagination-lg">
                    <li class="page-item">
                        <a class="page-link" onclick="@OnPrevPage">
                            <i class="ai-arrow-left me-2"></i>
                            Prev
                        </a>
                    </li>

                    <li class="page-item">
                        <a class="page-link" onclick="@OnNextPage">
                            Next
                            <i class="ai-arrow-right ms-2"></i>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>

    </div>
    <!-- Right side image gallery grid with gutters -->

</div>

@code {
    [Parameter]
    public EventCallback<ProductImage> OnImageSelect { get; set; }

    [Parameter]
    public bool SelectMode { get; set; } = false;

    public string CurrentStatus
    {
        get
        {
            return ProductStatusConfigNames.GetUXName(AppStateObj.PFConfig.Status);
        }
        set
        {
            GetProductsByStatus(value);
        }
    }

    private bool gettingProducts = false;
    private int pageCount = 0;
    private int maxPages = 0;
    private IEnumerable<ProductImage>? productImages;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(" ====> Blazor ProductFilter : OnInitializedAsync " + AppStateObj.CurrentCustomer.Id);
        gettingProducts = true;
        await ShopjetsAdmin.InitializeClient(AppStateObj.CurrentCustomer.ShopifyShopDomain, AppStateObj.CurrentCustomer.ShopifyAccessToken);
        AppStateObj.ProductImages = ShopjetsAdmin.GetFilteredProducts(AppStateObj);
        maxPages = ShopjetsAdmin.GetMaxPages();
        productImages = ShopjetsAdmin.GetProductImagePage(pageCount);
        gettingProducts = false;
        return;
    }

    private async Task SelectImage(ProductImage selectedProductImage)
    {
        if (selectedProductImage != null)
        {
            AppStateObj.EditorProductImage = selectedProductImage;
            await OnImageSelect.InvokeAsync(selectedProductImage);
        }
    }

    private async Task GetProductsByStatus(string sConfigValue)
    {
        gettingProducts = true;
        pageCount = 0;

        Console.WriteLine("Changing status : " + sConfigValue);
        switch (sConfigValue)
        {
            case "All":
                AppStateObj.PFConfig.Status = ProductStatusConfig.All;
                break;

            case "Active":
                AppStateObj.PFConfig.Status = ProductStatusConfig.Active;
                break;

            case "Draft":
                AppStateObj.PFConfig.Status = ProductStatusConfig.Draft;
                break;

            case "Archived":
                AppStateObj.PFConfig.Status = ProductStatusConfig.Archived;
                break;
        }

        AppStateObj.ProductImages = ShopjetsAdmin.GetFilteredProducts(AppStateObj);
        maxPages = ShopjetsAdmin.GetMaxPages();
        productImages = ShopjetsAdmin.GetProductImagePage(pageCount);
        gettingProducts = false;
        StateHasChanged();

        return;
    }

    private async Task OnTitleChanged(string titleValue)
    {
        AppStateObj.PFConfig.Title = titleValue;
        await GetProductsByTitle(false);

    }
    private async Task GetProductsByTitle(bool clearTitle)
    {
        gettingProducts = true;
        pageCount = 0;

        if (clearTitle)
            AppStateObj.PFConfig.Title = string.Empty;

        Console.WriteLine("Title matches : " + AppStateObj.PFConfig.Title);

        AppStateObj.ProductImages = ShopjetsAdmin.GetFilteredProducts(AppStateObj);
        maxPages = ShopjetsAdmin.GetMaxPages();
        productImages = ShopjetsAdmin.GetProductImagePage(pageCount);
        gettingProducts = false;
        StateHasChanged();

        return;
    }

    private async Task OnTagChanged(string tagValue)
    {
        AppStateObj.PFConfig.Tag = tagValue;
        await GetProductsByTag(false);

    }

    private async Task GetProductsByTag(bool clearTag)
    {
        gettingProducts = true;
        pageCount = 0;

        if (clearTag)
            AppStateObj.PFConfig.Tag = string.Empty;

        Console.WriteLine("Tag matches : " + AppStateObj.PFConfig.Tag);

        AppStateObj.ProductImages = ShopjetsAdmin.GetFilteredProducts(AppStateObj);
        maxPages = ShopjetsAdmin.GetMaxPages();
        productImages = ShopjetsAdmin.GetProductImagePage(pageCount);
        gettingProducts = false;
        StateHasChanged();

        return;
    }

    private void OnPrevPage()
    {
        gettingProducts = true;
        pageCount -= 1;
        if (pageCount < 0)
            pageCount = 0;

        productImages = ShopjetsAdmin.GetProductImagePage(pageCount);
        gettingProducts = false;
        StateHasChanged();
    }

    private void OnNextPage()
    {
        gettingProducts = true;
        pageCount += 1;
        if (pageCount > maxPages)
            pageCount = maxPages;

        productImages = ShopjetsAdmin.GetProductImagePage(pageCount);
        gettingProducts = false;
        StateHasChanged();
    }
}